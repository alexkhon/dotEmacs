* Package: emacs-surround
** Notes
- This should be in the convenience tools set
** Usage
https://github.com/ganmacs/emacs-surround
Usage
      change surround: C-q {symbolORIG}{symbolNEW}
      insert surround: C-q i{symbol}
      delete surround: C-q d{symbol}
** Code
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin) 
  (add-to-list 'load-path "/Users/alex/Config/dotEmacs/dotEmacsDir/experimental/emacs-surround"))
(when (eq system-type 'gnu/linux)
  (add-to-list 'load-path "/home/alex/Config/dotEmacs/dotEmacsDir/experimental/emacs-surround"))

(require 'emacs-surround)
(global-set-key (kbd "C-q") 'emacs-surround)
#+END_SRC

* Package: sr-speedbar
** Notes
- https://www.reddit.com/r/emacs/comments/6vxxp5/how_can_i_change_srspeedbar_to_open_on_the_left/
- This should have it's own file
** Usage
C-x e sr-speedbar-toggle
** Code
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin) 
  (add-to-list 'load-path "/Users/alex/Config/dotEmacs/dotEmacsDir/experimental/sr-speedbar"))
(when (eq system-type 'gnu/linux)
  (add-to-list 'load-path "/home/alex/Config/dotEmacs/dotEmacsDir/experimental/sr-speedbar"))

(require 'sr-speedbar)
(setq speedbar-use-images nil)
(setq sr-speedbar-right-side nil)
(setq sr-speedbar-width 35)
(setq sr-speedbar-max-width 35)
(global-set-key (kbd "C-x e") 'sr-speedbar-toggle)
#+END_SRC

* Package: linum-mode
** Notes
- Should try to hook this mode to specific modes
- The hooks should go into their own files; e.g. org-mode hooks should go into the org-mode file
** Code
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (linum-mode 1)))
(setq linum-format "%4d \u2502 ")
#+END_SRC

* Package: hl-line-mode
** Notes
- The hooks should go into their own files; e.g. org-mode hooks should go into the org-mode file
** Code
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'hl-line-mode)
(add-hook 'ibuffer-mode-hook 'hl-line-mode)
#+END_SRC

* Package: iBuffer
** Notes
https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/
** Code
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
(quote (("default"
("dired" (mode . dired-mode))
("org" (name . "^.*org$"))

("web" (or (mode . web-mode) (mode . js2-mode)))
("shell" (or (mode . eshell-mode) (mode . shell-mode)))
("mu4e" (name . "\*mu4e\*"))
("programming" (or
(mode . python-mode)
(mode . c++-mode)))
("emacs" (or
(name . "^\\*scratch\\*$")
(name . "^\\*Messages\\*$")))
))))
(add-hook 'ibuffer-mode-hook
(lambda ()
(ibuffer-auto-mode 1)
(ibuffer-switch-to-saved-filter-groups "default")))

;; don't show these
;(add-to-list 'ibuffer-never-show-predicates "zowie")
;; Don't show filter groups if there are no buffers in that group
(setq ibuffer-show-empty-filter-groups nil)

;; Don't ask for confirmation to delete marked buffers
(setq ibuffer-expert t)
#+END_SRC

* Package: treemacs
** Notes
- https://github.com/Alexander-Miller/treemacs#org-support
** Usage
- C-x t t  open treemacs
- M-0      jump to treemacs
- use regular window commands to jump out of treemacs
** Code
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35
          treemacs-workspace-switch-cleanup      nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC

* Package: doom-modeline
** Notes
- https://github.com/seagle0128/doom-modeline
- If the icons are not showing, do the following: M-x all-the-icons-install-fonts
** Code
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+END_SRC
* Convenient Key mappings
** Code
#+BEGIN_SRC emacs-lisp

#+END_SRC
