* Package: try
Allows you to try a package without installing
** Usage
M-x try
** Code
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* Package: which-key
Upon hitting C-x, a list of possible command shows
** Usage
C-x
M-x
<ESC>
** Code
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* Package: ace-window
Easier window navigation
** Usage
Command w
** Code
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
  (global-set-key (kbd "s-w") 'ace-window)
  ;;(global-set-key [remap other-window] 'ace-window)
  ;;(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  )
:config
(set-face-attribute
     'aw-leading-char-face nil
     :foreground "deep sky blue"
     :weight 'bold
     :height 3.0)
    (set-face-attribute
     'aw-mode-line-face nil
     :inherit 'mode-line-buffer-id
     :foreground "lawn green")
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
          aw-dispatch-always t
          aw-dispatch-alist
          '((?x aw-delete-window "Ace - Delete Window")
            (?c aw-swap-window "Ace - Swap Window")
            (?n aw-flip-window)
            (?v aw-split-window-vert "Ace - Split Vert Window")
            (?h aw-split-window-horz "Ace - Split Horz Window")
            (?m delete-other-windows "Ace - Maximize Window")
            (?g delete-other-windows)
            (?b balance-windows)
            (?u (lambda ()
                  (progn
                    (winner-undo)
                    (setq this-command 'winner-undo))))
            (?r winner-redo)))

    (when (package-installed-p 'hydra)
      (defhydra hydra-window-size (:color red)
        "Windows size"
        ("h" shrink-window-horizontally "shrink horizontal")
        ("j" shrink-window "shrink vertical")
        ("k" enlarge-window "enlarge vertical")
        ("l" enlarge-window-horizontally "enlarge horizontal"))
      (defhydra hydra-window-frame (:color red)
        "Frame"
        ("f" make-frame "new frame")
        ("x" delete-frame "delete frame"))
      (defhydra hydra-window-scroll (:color red)
        "Scroll other window"
        ("n" joe-scroll-other-window "scroll")
        ("p" joe-scroll-other-window-down "scroll down"))
      (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
      (add-to-list 'aw-dispatch-alist '(?o hydra-window-scroll/body) t)
      (add-to-list 'aw-dispatch-alist '(?\; hydra-window-frame/body) t))
    (ace-window-display-mode t))
#+END_SRC

* Package: avy 
Location jumping similar to a package in vim
** Usage
M-s {one_chars}
** Code
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char-2))
#+END_SRC

* Package: swiper / council / ivy
Improve naviagtion via jump-by-searching
** Usage
 C-x b	switch buffer using ivy
 C-s		swiper search
 C-r		swiper search
 M-x		emacs command using council
 C-x C-f	find-file using council
** Code
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-user-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  )
;; ............................................
(use-package counsel
  :ensure t
  )
;; ............................................
(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    ;; (setq enable-recursive-minibuffers t)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ))
#+END_SRC






